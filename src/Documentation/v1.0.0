-> local uses: local uses of a stmt 'A' gives us a list of stmts which depend on stmt 'A'
-> local defs: local defs of stmt'A' and local 'L' gives Latest, most valid definition of a local 'L' in the context of stmt 'A'

-> Anchor: It is a stmt which is one of the following
    1.Return statements
    2.function calls
    3.field asssignments
    4.array Assignments
    5.Global Assignments
    6.conditional branches

-> LocalUses.getUsesOf(Unit s) this function gives us a java list of all local uses of s 


CONSTRAINTS:

    1. Assume there are only 5 out of 6 anchors (all but global assignment) in our code
    2. Every stmt has upto one dependant only  (we will solve this soon in v1.1.0 Use of a tree structure to maintain stuff/ find common ancestor nodes)

Approach:

    1. Recursively call LocalUses.getUsesOf() from entry point of a body and call again the same method for its child/dependant.
    
    
    2. Termination criteria for recursion: If the call stack encounters a child/dependant that is a) an anchor or b) null/an empty list or 3) a 'marked'/'tagged' stmt
        a) if anchor encountered then mark every unit/stmt in our recusrive call stack as 'alive'
        b) if nill encountered then mark every unit/stmt in our recursive call stack as 'dead'
        c) if 'alive' stmt is found then execute a) if 'dead' is found then execute b)

    3. Traverse body and find the next unmarked stmt in body and repeat step 1 and step 2
        
    4. Terminate when no untagged/unmarked stmt is left

    5. Lastly delete every statement marked as 'dead'
